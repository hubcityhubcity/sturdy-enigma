version: 2.1

# reusable commands
commands:
  yarn-install:
    description: '[YARN] update and install'
    steps:
      - restore_cache:
          keys:
            - v5-dependencies-root-{{ checksum "yarn.lock" }}
            - v5-dependencies-root-

      - run: yarn install
      - save_cache:
          paths:
            - yarn.lock
            - node_modules
          key: v5-dependencies-root-{{ checksum "yarn.lock" }}
  npm-install-app:
    description: '[NPM] update and install'
    steps:
      - restore_cache:
          keys:
            - v2-dependencies-app-root-{{ checksum "lunie/yarn.lock" }}
            - v2-dependencies-app-root-

      - run: cd lunie && npm install
      - save_cache:
          paths:
            - lunie/node_modules
          key: v2-dependencies-app-root-{{ checksum "lunie/yarn.lock" }}

jobs:
  pendingUpdated:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - run: yarn add simsala
      - run: node node_modules/simsala/src/cli.js check 

  lint:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - yarn-install
      - run: yarn run lint

  testUnit:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - yarn-install
      # - run:
      #     name: Setup Code Climate test-reporter
      #     command: |
      #       # download test reporter as a static binary
      #       curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      #       chmod +x ./cc-test-reporter
      - run:
          name: Test
          command: |
            # notify Code Climate of a pending test report using `before-build`
            # ./cc-test-reporter before-build
            yarn run initiate-submodule
            yarn run test
            # upload test report to Code Climate
            # ./cc-test-reporter format-coverage -t lcov ./coverage/lcov.info
            # ./cc-test-reporter upload-coverage
          no_output_timeout: 120

  security:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - run:
          name: Audit
          command: |
            set +e

            SUMMARY="$(yarn audit | grep Severity)"
            VULNERABILITIES=".*(High|Critical).*"

            if [[ $SUMMARY =~ $VULNERABILITIES ]]; then
              echo "Unsafe dependencies found: $SUMMARY" >&2
              exit 1
            fi
            echo "Your dependencies are secure enough: $SUMMARY"
            exit 0
  
  testE2E:
    machine: true
    steps:
      - add_ssh_keys:
          fingerprints:
            - "65:5f:43:fd:be:48:c8:45:d5:39:ef:86:14:d6:e1:12"
      - checkout
      - run: npm install
      - run:
          name: Add GitHub to known hosts
          command: |
            mkdir -p ~/.ssh
            touch ~/.ssh/known_hosts
            ssh-keygen -R github.com
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: checkout backend
          command: |
            git clone git@github.com:luniehq/lunie-backend.git
            cd lunie-backend
            git checkout origin/develop
      - run: 
          name: Use NVM
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Install node version
          command: |
            nvm install v10.13.0
            nvm alias default v10.13.0
      - run:
          name: Install Chrome
          command: |
            wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
            sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
            sudo apt-get update
            sudo apt-get -y install google-chrome-stable
      - run:
          name: Run testnet
          command: |
            cd lunie-backend
            docker-compose up --build -d
      - run:
          # needs to be done in CI to be sure it is build once we start the tests
          name: Build Extension
          command: |
            npm run initiate-submodule
            npm run test:e2e:build
          environment:
            VUE_APP_GRAPHQL_URL: http://127.0.0.1:4000 # Browserstack tunneling doesn't work with "localhost"
      - npm-install-app
      - run:
          # needs to be done in CI to be sure it is build once we start the tests
          name: Build App
          command: |
            cd lunie
            npm run test:e2e:build
          environment:
            NETWORK: local-cosmos-hub-testnet
            VUE_APP_GRAPHQL_URL: http://127.0.0.1:4000 # Browserstack tunneling doesn't work with "localhost"
      - run:
          name: Test
          command: npm run test:e2e:start-lunie & npm run test:e2e
          no_output_timeout: 120
      - store_artifacts:
          path: ./screenshots
          when: on_fail

  # Create release.
  release:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - run: |
          yarn add simsala
          git config user.email "bot@lunie.io"
          git config user.name "Lunie Bot"
          node node_modules/simsala/src/cli.js release-candidate --owner luniehq --repository lunie-browser-extension --token $GIT_BOT_TOKEN
            
  publish:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - run:
          command: ./scripts/publish.sh

  # deploy to the Chrome Web Store
  deploy:
    docker:
      - image: circleci/node:12.17.0
    steps:
      - checkout
      - yarn-install
      - run: 
          command: |
            npm run initiate-submodule
            EXTENSION=true LUNIE_API=$LUNIE_API npm run build
            npm run build-zip
            sh ./scripts/deploy.sh ./dist-zip/lunie-browser-extension.zip

workflows:
  version: 2
  testPR:
    jobs:
      # Static checks before
      - pendingUpdated:
          filters:
            branches:
              ignore:
                - release
                - master
                - develop
                - /release-candidate.*/

      - security:
          filters:
            branches:
              ignore: release

      - lint:
          filters:
            branches:
              ignore: release

      - testUnit:
          filters:
            branches:
              ignore: release

      # - testE2E:
      #     filters:
      #       branches:
      #         ignore: release

  releaseManually:
    jobs:
      - release:
          filters:
            branches:
              only:
                - release
          
  publish:
    jobs:
      - publish:
          filters:
            branches:
              only: develop
          
  deploy:
    jobs:
      - deploy:
          filters:
            branches:
              only: master
